/**
 * Revenue Magick Tracking SDK
 * Digital Body Language™ Tracking for Conversion Spy Engine™
 * Version: 1.0.0
 */

(function(window, document) {
    'use strict';

    // Configuration
    const CONFIG = {
        apiEndpoint: 'http://localhost:8000/api/v1/tracking',
        batchSize: 10,
        flushInterval: 5000, // 5 seconds
        sessionTimeout: 30 * 60 * 1000, // 30 minutes
        trackingEnabled: true
    };

    // Global state
    let userId = null;
    let sessionId = null;
    let eventQueue = [];
    let lastActivity = Date.now();
    let isInitialized = false;

    // Utility functions
    function generateId() {
        return 'rm_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }

    function setCookie(name, value, days = 365) {
        const expires = new Date(Date.now() + days * 24 * 60 * 60 * 1000).toUTCString();
        document.cookie = `${name}=${value}; expires=${expires}; path=/; SameSite=Lax`;
    }

    function getOrCreateUserId() {
        let id = getCookie('rm_user_id');
        if (!id) {
            id = generateId();
            setCookie('rm_user_id', id);
        }
        return id;
    }

    function getOrCreateSessionId() {
        let id = sessionStorage.getItem('rm_session_id');
        const lastActivityTime = sessionStorage.getItem('rm_last_activity');
        
        // Check if session expired
        if (id && lastActivityTime) {
            const timeDiff = Date.now() - parseInt(lastActivityTime);
            if (timeDiff > CONFIG.sessionTimeout) {
                id = null;
            }
        }

        if (!id) {
            id = generateId();
            sessionStorage.setItem('rm_session_id', id);
            
            // Create session on server
            createSession();
        }
        
        sessionStorage.setItem('rm_last_activity', Date.now().toString());
        return id;
    }

    // API functions
    async function sendEvent(eventData) {
        if (!CONFIG.trackingEnabled) return;

        try {
            const response = await fetch(`${CONFIG.apiEndpoint}/events`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(eventData)
            });

            if (!response.ok) {
                console.warn('Revenue Magick: Failed to send event', response.status);
            }
        } catch (error) {
            console.warn('Revenue Magick: Error sending event', error);
        }
    }

    async function createSession() {
        if (!CONFIG.trackingEnabled) return;

        const sessionData = {
            user_id: userId,
            source: document.referrer || 'direct',
            referrer: document.referrer,
            device_type: /Mobile|Android|iPhone|iPad/.test(navigator.userAgent) ? 'mobile' : 'desktop',
            browser: navigator.userAgent.split(' ').pop(),
            location: window.location.href
        };

        try {
            const response = await fetch(`${CONFIG.apiEndpoint}/sessions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(sessionData)
            });

            if (!response.ok) {
                console.warn('Revenue Magick: Failed to create session', response.status);
            }
        } catch (error) {
            console.warn('Revenue Magick: Error creating session', error);
        }
    }

    function queueEvent(eventType, elementId, duration, metadata = {}) {
        const event = {
            user_id: userId,
            session_id: sessionId,
            event_type: eventType,
            element_id: elementId,
            duration: duration,
            metadata: {
                ...metadata,
                url: window.location.href,
                timestamp: Date.now(),
                viewport: {
                    width: window.innerWidth,
                    height: window.innerHeight
                }
            }
        };

        eventQueue.push(event);

        if (eventQueue.length >= CONFIG.batchSize) {
            flushEvents();
        }
    }

    async function flushEvents() {
        if (eventQueue.length === 0) return;

        const events = [...eventQueue];
        eventQueue = [];

        for (const event of events) {
            await sendEvent(event);
        }
    }

    // Digital Body Language™ Tracking Functions

    // 1. Scroll Velocity and Pause Detection
    let scrollStartTime = null;
    let lastScrollPosition = 0;
    let scrollPauses = [];

    function trackScrollBehavior() {
        let scrollTimer = null;

        window.addEventListener('scroll', function() {
            const currentTime = Date.now();
            const currentPosition = window.pageYOffset;

            if (scrollStartTime === null) {
                scrollStartTime = currentTime;
                lastScrollPosition = currentPosition;
            }

            // Clear existing timer
            if (scrollTimer) {
                clearTimeout(scrollTimer);
            }

            // Set timer to detect scroll pause
            scrollTimer = setTimeout(function() {
                const scrollDuration = currentTime - scrollStartTime;
                const scrollDistance = Math.abs(currentPosition - lastScrollPosition);
                const scrollVelocity = scrollDistance / scrollDuration;

                queueEvent('scroll_pause', null, scrollDuration, {
                    scroll_position: currentPosition,
                    scroll_distance: scrollDistance,
                    scroll_velocity: scrollVelocity,
                    page_height: document.body.scrollHeight,
                    viewport_height: window.innerHeight
                });

                scrollStartTime = null;
            }, 500); // 500ms pause detection
        });
    }

    // 2. CTA Hover Time Measurement
    function trackCTAHovers() {
        const ctaSelectors = [
            'button',
            'a[href]',
            '[role="button"]',
            '.btn',
            '.cta',
            'input[type="submit"]'
        ];

        ctaSelectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(element => {
                let hoverStartTime = null;

                element.addEventListener('mouseenter', function() {
                    hoverStartTime = Date.now();
                });

                element.addEventListener('mouseleave', function() {
                    if (hoverStartTime) {
                        const hoverDuration = Date.now() - hoverStartTime;
                        const elementId = element.id || element.className || element.tagName;

                        queueEvent('cta_hover', elementId, hoverDuration, {
                            element_text: element.textContent?.trim().substring(0, 100),
                            element_type: element.tagName.toLowerCase(),
                            element_position: {
                                x: element.offsetLeft,
                                y: element.offsetTop
                            }
                        });

                        hoverStartTime = null;
                    }
                });

                // Track clicks
                element.addEventListener('click', function() {
                    const elementId = element.id || element.className || element.tagName;
                    queueEvent('cta_click', elementId, 0, {
                        element_text: element.textContent?.trim().substring(0, 100),
                        element_type: element.tagName.toLowerCase()
                    });
                });
            });
        });
    }

    // 3. Form Interaction and Abandonment
    function trackFormBehavior() {
        document.querySelectorAll('form').forEach(form => {
            const formId = form.id || form.className || 'unnamed_form';
            let formStartTime = null;
            let fieldInteractions = {};

            // Track form start
            form.addEventListener('focusin', function() {
                if (!formStartTime) {
                    formStartTime = Date.now();
                    queueEvent('form_start', formId, 0);
                }
            });

            // Track field interactions
            form.querySelectorAll('input, textarea, select').forEach(field => {
                const fieldId = field.id || field.name || field.type;
                let fieldStartTime = null;

                field.addEventListener('focus', function() {
                    fieldStartTime = Date.now();
                });

                field.addEventListener('blur', function() {
                    if (fieldStartTime) {
                        const fieldDuration = Date.now() - fieldStartTime;
                        fieldInteractions[fieldId] = (fieldInteractions[fieldId] || 0) + fieldDuration;

                        queueEvent('field_interaction', fieldId, fieldDuration, {
                            form_id: formId,
                            field_type: field.type,
                            field_value_length: field.value.length,
                            is_required: field.required
                        });
                    }
                });
            });

            // Track form submission
            form.addEventListener('submit', function() {
                if (formStartTime) {
                    const formDuration = Date.now() - formStartTime;
                    queueEvent('form_submit', formId, formDuration, {
                        field_interactions: fieldInteractions,
                        total_fields: form.querySelectorAll('input, textarea, select').length
                    });
                }
            });

            // Track form abandonment (when user leaves without submitting)
            window.addEventListener('beforeunload', function() {
                if (formStartTime && Object.keys(fieldInteractions).length > 0) {
                    const formDuration = Date.now() - formStartTime;
                    queueEvent('form_abandon', formId, formDuration, {
                        field_interactions: fieldInteractions,
                        completed_fields: Object.keys(fieldInteractions).length
                    });
                }
            });
        });
    }

    // 4. Page Engagement Tracking
    function trackPageEngagement() {
        const pageStartTime = Date.now();
        let isVisible = true;

        // Track page visibility
        document.addEventListener('visibilitychange', function() {
            isVisible = !document.hidden;
            queueEvent('page_visibility', null, 0, {
                is_visible: isVisible
            });
        });

        // Track page unload
        window.addEventListener('beforeunload', function() {
            const pageViewDuration = Date.now() - pageStartTime;
            queueEvent('page_unload', null, pageViewDuration, {
                scroll_depth: Math.round((window.pageYOffset / document.body.scrollHeight) * 100),
                max_scroll_position: window.pageYOffset
            });
            
            // Flush remaining events
            flushEvents();
        });

        // Track initial page view
        queueEvent('page_view', null, 0, {
            page_title: document.title,
            page_url: window.location.href,
            referrer: document.referrer
        });
    }

    // 5. Hesitation Loop Detection
    function trackNavigationBehavior() {
        let navigationHistory = [];

        // Track back/forward button usage
        window.addEventListener('popstate', function() {
            queueEvent('navigation_back', null, 0, {
                history_length: history.length
            });
        });

        // Track link clicks that might indicate hesitation
        document.addEventListener('click', function(event) {
            if (event.target.tagName === 'A' && event.target.href) {
                const href = event.target.href;
                
                // Check if user is revisiting a page they've been to
                if (navigationHistory.includes(href)) {
                    queueEvent('hesitation_loop', event.target.id || href, 0, {
                        revisit_count: navigationHistory.filter(url => url === href).length,
                        link_text: event.target.textContent?.trim().substring(0, 100)
                    });
                }
                
                navigationHistory.push(href);
            }
        });
    }

    // Main initialization function
    function init(config = {}) {
        if (isInitialized) return;

        // Merge user config with defaults
        Object.assign(CONFIG, config);

        // Initialize user and session
        userId = getOrCreateUserId();
        sessionId = getOrCreateSessionId();

        // Start tracking
        trackPageEngagement();
        trackScrollBehavior();
        trackCTAHovers();
        trackFormBehavior();
        trackNavigationBehavior();

        // Set up periodic event flushing
        setInterval(flushEvents, CONFIG.flushInterval);

        isInitialized = true;

        console.log('Revenue Magick Tracker initialized', {
            userId: userId,
            sessionId: sessionId
        });
    }

    // Public API
    window.RevenueMagick = {
        init: init,
        track: queueEvent,
        flush: flushEvents,
        setUserId: function(id) {
            userId = id;
            setCookie('rm_user_id', id);
        },
        getUserId: function() {
            return userId;
        },
        getSessionId: function() {
            return sessionId;
        },
        config: CONFIG
    };

    // Auto-initialize if script is loaded with data-auto-init
    if (document.currentScript && document.currentScript.hasAttribute('data-auto-init')) {
        init();
    }

})(window, document); 